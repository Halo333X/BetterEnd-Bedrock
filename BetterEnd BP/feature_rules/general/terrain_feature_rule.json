{
  "format_version": "1.21.0",
  "minecraft:feature_rules": {
    "description": {
      "identifier": "betterend:terrain_feature_rule",
      "places_feature": "betterend:gen/terrain/terrain_feature"
    },
    "conditions": {
      "placement_pass": "first_pass",
      "minecraft:biome_filter": {
        "test": "has_biome_tag",
        "operator": "==",
        "value": "the_end"
      }
    },
    "distribution": {
      "iterations": "(math.abs(v.originx) > 400 || math.abs(v.originz) > 400) ? 256 : 0",
      "x": {
        "distribution": "fixed_grid",
        "extent": [0, 15]
      },
      "y": "t.surface = q.heightmap(v.worldx, v.worldz); t.FillHeight = 64 + (t.surface); t.CavePosition = 30; t.CaveHeight = 22; t.noise16 = q.noise(v.worldx / 16, v.worldz / 16); t.noise32 = q.noise(v.worldx / 32, v.worldz / 32); t.noise64 = q.noise(v.worldx / 64, v.worldz / 64); t.random16 = 1.1; t.random32 = 1.2; t.random64 = 1.3; t.cave_noise1 = ((t.random16 * t.noise16) + (t.random32 * t.noise32) + (t.random64 * t.noise64))/(t.random16 + t.random32 + t.random64); t.noisexz16 = q.noise((v.worldx - 8231) / 16, (v.worldz - 8231) / 16); t.noisexz32 = q.noise((v.worldx - 8231) / 32, (v.worldz - 8231) / 32); t.noisexz64 = q.noise((v.worldx - 8231) / 64, (v.worldz - 8231) / 64); t.cave_noise2 = ((t.random16 * t.noisexz16) + (t.random32 * t.noisexz32) + (t.random64 * t.noisexz64))/(t.random16 + t.random32 + t.random64); t.BiomeSize = 512; t.BiomeTransition = q.noise(v.worldx / 256, v.worldz / 256) * 0.01 + q.noise(v.worldx / 128, v.worldz / 128) * 0.05 + q.noise(v.worldx / 64, v.worldz / 64) * 0.025 * q.noise(v.worldx / 32, v.worldz / 32) * 0.01025 + q.noise(v.worldx / 13, v.worldz / 13) * 0.01045; t.x = v.worldx / t.BiomeSize + t.BiomeTransition; t.z = v.worldz / t.BiomeSize + t.BiomeTransition; t.d1 = 999.0; t.d2 = 999.0; t.c1 = 0.0; t.i = 0.0; loop(9, { t.px = math.floor(t.x) + math.mod(t.i, 3) - 1; t.pz = math.floor(t.z) + math.floor(t.i/3) - 1; t.rx = t.px * 127.1 + t.pz * 311.7; t.rz = t.pz * 269.5 + t.px * 183.3; t.rx = (2.0 * math.abs(t.rx / 3.14 - 2.0 * math.floor(t.rx / (2.0 * 3.14)) - 1.0) - 1.0) * 41415.92653; t.rz = (2.0 * math.abs(t.rz / 3.14 - 2.0 * math.floor(t.rz / (2.0 * 3.14)) - 1.0) - 1.0) * 41415.92653; t.rx = (t.rx - math.floor(t.rx)); t.rz = (t.rz - math.floor(t.rz)); t.d = math.pow(t.px + t.rx - t.x, 2) + math.pow(t.pz + t.rz - t.z, 2); (t.d < t.d1) ? { t.d2 = t.d1; t.d1 = t.d; t.c1 = t.rx; } : { (t.d < t.d2) ? { t.d2 = t.d;}; }; t.i = t.i + 1; }); t.BetterEndBiome = math.floor(t.c1 * 18); v.stratum.pattern = 'painted_mountains'; v.stratum.restriction = 0; v.stratum.foundation.method = 'variable'; v.stratum.foundation.minimum = 4; v.stratum.foundation.maximum = 8; v.stratum.foundation.variation.method = 'noise'; v.stratum.foundation.variation.spread = 32; v.stratum.foundation.variation.offset.x = 4; v.stratum.foundation.variation.offset.z = 8; v.stratum.placement.subject = 'pattern'; v.stratum.placement.iterations = 14; v.pattern.identifier = v.stratum.pattern; t.BiomeMountain = t.surface > 0 ? (math.sqrt(math.abs(math.sqrt(t.d1) - math.sqrt(t.d2))) * ((t.BetterEndBiome == 3) ? 3 : (t.BetterEndBiome == 12) ? 3 : 0) * (7 + q.noise(v.worldx / 128, v.worldz / 128) + 4 * q.noise(v.worldx / 64, v.worldz / 64) + 2 * q.noise(v.worldx / 32, v.worldz / 32) + 2)) : 0; t.sulphuric_rock = t.surface > 0 ? 4+(q.noise(v.worldx/2, v.worldz/2))*2 : 0; t.megalakes = (q.noise(v.worldx / 1024, v.worldz / 1024) * 16 + q.noise(v.worldx / 512, v.worldz / 512) * 8 + q.noise(v.worldx / 128, v.worldz / 128) * 6 + q.noise(v.worldx / 64, v.worldz / 64) * 2 + q.noise(v.worldx / 32, v.worldz / 32) * 2 + q.noise(v.worldx / 16, v.worldz / 16) * 1); t.crystal_moss_patch_area = q.noise(v.worldx / 30, v.worldz / 30) + q.noise(v.worldx / 4, v.worldz / 4) * 0.25; t.end_moss_area = q.noise(v.worldx / 32, v.worldz / 32) + q.noise(v.worldx, v.worldz) * 0.25; t.pallidium_area = q.noise(v.worldx / 512, v.worldz / 512) + q.noise(v.worldx / 256, v.worldz / 256) + q.noise(v.worldx / 128, v.worldz / 128) + q.noise(v.worldx /  64, v.worldz / 64) * 0.25 + q.noise(v.worldx / 4 , v.worldz / 4) * 0.05; t.brimstone_area = q.noise(v.worldx / 84, v.worldz / 84) + q.noise(v.worldx / 42, v.worldz / 42) * 0.01 + q.noise(v.worldx / 21, v.worldz / 21) * 0.01; return 0;",
      "z": {
        "distribution": "fixed_grid",
        "extent": [0, 15]
      }
    }
  }
}
