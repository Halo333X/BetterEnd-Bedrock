{
	"format_version": "1.21.0",
	"minecraft:scatter_feature": {
		"description": {
			"identifier": "betterend:painted_mountains/strata_height_column"
		},
		"places_feature": "betterend:painted_mountains/strata_column",
		"iterations": "!v.stratum.restriction ? { return 1; } : { v.stratum.restriction.variation.method == 'random' ? { v.stratum.restriction.value = math.random_integer(v.stratum.restriction.minimum, v.stratum.restriction.maximum); }; v.stratum.restriction.variation.method == 'sinusoidal' ? { v.stratum.restriction.value = math.clamp(math.floor((v.stratum.restriction.minimum + v.stratum.restriction.maximum) / 2 + 0.5 + (math.sin((v.worldx - v.stratum.restriction.variation.offset.x) / v.stratum.restriction.variation.spread) * math.sin((v.worldz - v.stratum.restriction.variation.offset.z) / v.stratum.restriction.variation.spread)) * ((v.stratum.restriction.maximum - v.stratum.restriction.minimum) / 2 + 0.5)), v.stratum.restriction.minimum, v.stratum.restriction.maximum); }; v.stratum.restriction.variation.method == 'noise' ? { v.stratum.restriction.value = math.clamp(math.floor((v.stratum.restriction.minimum + v.stratum.restriction.maximum) / 2 + 0.5 + query.noise((v.worldx - v.stratum.restriction.variation.offset.x) / v.stratum.restriction.variation.spread, (v.worldz - v.stratum.restriction.variation.offset.z) / v.stratum.restriction.variation.spread) * ((v.stratum.restriction.maximum - v.stratum.restriction.minimum) / 2 + 0.5)), v.stratum.restriction.minimum, v.stratum.restriction.maximum); }; v.stratum.restriction.target.direction == 1 ? { !v.stratum.restriction.target.reflected ? { return v.stratum.restriction.value > v.stratum.restriction.target.threshold; } : { return math.abs(v.stratum.restriction.value) > v.stratum.restriction.target.threshold; }; } ; v.stratum.restriction.target.direction == -1 ? { !v.stratum.restriction.target.reflected ? { return v.stratum.restriction.value < v.stratum.restriction.target.threshold; } : { return math.abs(v.stratum.restriction.value) < v.stratum.restriction.target.threshold; }; }; };",
		"x": 0,
		"z": 0,
		"y": "v.column.block_iteration = 0; v.stratum.foundation.method == 'constant' ? { return v.stratum.foundation.value; }; v.stratum.foundation.method == 'variable' ? { v.stratum.foundation.variation.method == 'random' ? { return math.random_integer(v.stratum.foundation.minimum, v.stratum.foundation.maximum); }; v.stratum.foundation.variation.method == 'sinusoidal' ? { return math.clamp(math.floor((v.stratum.foundation.minimum + v.stratum.foundation.maximum) / 2 + 0.5 + (math.sin((v.worldx - v.stratum.foundation.variation.offset.x) / v.stratum.foundation.variation.spread) * math.sin((v.worldz - v.stratum.foundation.variation.offset.z) / v.stratum.foundation.variation.spread)) * ((v.stratum.foundation.maximum - v.stratum.foundation.minimum) / 2 + 0.5)), v.stratum.foundation.minimum, v.stratum.foundation.maximum); }; v.stratum.foundation.variation.method == 'noise' ? { return math.clamp(math.floor((v.stratum.foundation.minimum + v.stratum.foundation.maximum) / 2 + 0.5 + query.noise((v.worldx - v.stratum.foundation.variation.offset.x)/ v.stratum.foundation.variation.spread, (v.worldz - v.stratum.foundation.variation.offset.z) / v.stratum.foundation.variation.spread) * ((v.stratum.foundation.maximum - v.stratum.foundation.minimum) / 2 + 0.5)), v.stratum.foundation.minimum, v.stratum.foundation.maximum); }; };"
	}
}